#include "Component_Char.h"
#include <map>

std::map<char, std::pair<juce::uint64, juce::uint64>> charMap = 
{
    { 'a', { 0b00000000000000000000000000000000000010000001111000,
             0b00100010000010001000000111010000000000000000000000 }},
    { 'b', { 0b00000000000000000000000100000000010000000001110000,
             0b00010010000001001000000111000000000000000000000000 }},
    { 'c', { 0b00000000000000000000000000000000001110000001000100,
             0b00010000000001000100000011100000000000000000000000 }},
    { 'd', { 0b00000000000000000000000000100000000010000000111000,
             0b00010010000001001000000011100000000000000000000000 }},
    { 'e', { 0b00000000000000000000000000000000011100000010001000,
             0b00111110000010000000000111100000000000000000000000 }},
    { 'f', { 0b00000000000000000000000011000000001010000000100000,
             0b00011100000000100000000010000000000000000000000000 }},
    { 'g', { 0b00000000000000000000000000000000001110000001001000,
             0b00010010000000111000000000100000001100000000000000 }},
    { 'h', { 0b00000000000001000000000100000000010000000001110000,
             0b00010010000001001000000100100000000000000000000000 }},
    { 'i', { 0b00000000000000000000000010000000000000000000100000,
             0b00001000000000100000000010000000000000000000000000 }},
    { 'j', { 0b00000000000000000000000001000000000000000000010000,
             0b00000100000000010000000001000000011100000000000000 }},
    { 'k', { 0b00000000000000000000000100000000010100000001010000,
             0b00011000000001010000000101000000000000000000000000 }},
    { 'l', { 0b00000000000000000000000010000000001000000000100000,
             0b00001000000000100000000010000000000000000000000000 }},
    { 'm', { 0b00000000000000000000000000000000010100000011111000,
             0b00101010000010101000001010100000000000000000000000 }},
    { 'n', { 0b00000000000000000000000000000000011100000001011000,
             0b00010010000001001000000100100000000000000000000000 }},
    { 'o', { 0b00000000000000000000000000000000001100000001001000,
             0b00010010000001001000000011000000000000000000000000 }},
    { 'p', { 0b00000000000000000000000000000000011100000001001000,
             0b00010010000001110000000100000000010000000000000000 }},
    { 'q', { 0b00000000000000000000000000000000011100000010010000,
             0b00100100000001110000000001000000000110000000000000 }},
    { 'r', { 0b00000000000000000000000000000000011110000001100100,
             0b00010000000001000000000100000000000000000000000000 }},
    { 's', { 0b00000000000000000000000000000000001110000001000000,
             0b00001100000000001000000111000000000000000000000000 }},
    { 't', { 0b00000000000000000000000010000000011100000000100000,
             0b00001000000000100000000010000000000000000000000000 }},
    { 'u', { 0b00000000000000000000000000000000010010000001001000,
             0b00010010000001001000000011100000000000000000000000 }},
    { 'v', { 0b00000000000000000000000000000000010001000001000100,
             0b00010001000000101000000001000000000000000000000000 }},
    { 'w', { 0b00000000000000000000000000000000100010000010001000,
             0b00101010000010101000000101000000000000000000000000 }},
    { 'x', { 0b00000000000000000000000000000000100010000011011000,
             0b00011100000011011000001000100000000000000000000000 }},
    { 'y', { 0b00000000000000000000000000000000010010000001001000,
             0b00001110000000001000000000100000001100000000000000 }},
    { 'z', { 0b00000000000000000000000000000000011110000000001000,
             0b00000100000000100000000111100000000000000000000000 }},
    { ' ', { 0b00000000000000000000000000000000000000000000000000,
             0b00000000000000000000000000000000000000000000000000 }},
    { 'A', { 0b00000000000000000000000011000000010010000001001000,
             0b00011110000001001000000100100000000000000000000000 }},
    { 'B', { 0b00000000000000000000000111100000010001000001111000,
             0b00010001000001000100000111100000000000000000000000 }},
    { 'C', { 0b00000000000000000000000111100000110011000010000000,
             0b00100000000011001100000111100000000000000000000000 }},
    { 'D', { 0b00000000000000000000000111100000010011000001000100,
             0b00010001000001001100000111100000000000000000000000 }},
    { 'E', { 0b00000000000000000000000111100000010000000001110000,
             0b00010000000001000000000111100000000000000000000000 }},
    { 'F', { 0b00000000000000000000000111100000010000000001110000,
             0b00010000000001000000000100000000000000000000000000 }},
    { 'G', { 0b00000000000000000000000111100000110010000010000000,
             0b00100110000011001000000111100000000000000000000000 }},
    { 'H', { 0b00000000000000000000000100100000010010000001001000,
             0b00011110000001001000000100100000000000000000000000 }},
    { 'I', { 0b00000000000000000000000111100000000100000000010000,
             0b00000100000000010000000111100000000000000000000000 }},
    { 'J', { 0b00000000000000000000000111100000000100000000010000,
             0b00000100000010010000000111000000000000000000000000 }},
    { 'K', { 0b00000000000000000000000100100000010100000001100000,
             0b00010100000001001000000100100000000000000000000000 }},
    { 'L', { 0b00000000000000000000000100000000010000000001000000,
             0b00010000000001000000000111100000000000000000000000 }},
    { 'M', { 0b00000000000000000000001101100000101010000010101000,
             0b00101010000010101000001010100000000000000000000000 }},
    { 'N', { 0b00000000000000000000000100100000011010000001111000,
             0b00010110000001011000000100100000000000000000000000 }},
    { 'O', { 0b00000000000000000000000111100000110011000010000100,
             0b00100001000011001100000111100000000000000000000000 }},
    { 'P', { 0b00000000000000000000000111100000010001000001000100,
             0b00011110000001000000000100000000000000000000000000 }},
    { 'Q', { 0b00000000000000000000000111100000110001000010000100,
             0b00100101000011001000000111010000000000000000000000 }},
    { 'R', { 0b00000000000000000000000111000000010010000001001000,
             0b00011100000001001000000100100000000000000000000000 }},
    { 'S', { 0b00000000000000000000000111100000100000000001111000,
             0b00000001000010000100000111100000000000000000000000 }},
    { 'T', { 0b00000000000000000000001111100000001000000000100000,
             0b00001000000000100000000010000000000000000000000000 }},
    { 'U', { 0b00000000000000000000000100010000010001000001000100,
             0b00010001000001000100000011100000000000000000000000 }},
    { 'V', { 0b00000000000000000000001000010000100001000011001100,
             0b00010010000001111000000011000000000000000000000000 }},
    { 'W', { 0b00000000000000000000001000010000100101000010010100,
             0b00100101000011010100000110100000000000000000000000 }},
    { 'X', { 0b00000000000000000000001000100000110110000001110000,
             0b00011100000011011000001000100000000000000000000000 }},
    { 'Y', { 0b00000000000000000000001000100000110110000001110000,
             0b00001000000000100000000010000000000000000000000000 }},
    { 'Z', { 0b00000000000000000000000111110000000011000000011000,
             0b00001100000001100000000111110000000000000000000000 }},
    { ' ', { 0b00000000000000000000000000000000000000000000000000,
             0b00000000000000000000000000000000000000000000000000 }},
    { '0', { 0b00000000000000000000000111100000100011000010010100,
             0b00101001000011000100000111100000000000000000000000 }},
    { '1', { 0b00000000000000000000000001000000001100000000010000,
             0b00000100000000010000000011100000000000000000000000 }},
    { '2', { 0b00000000000000000000000011000000010010000001001000,
             0b00000110000000110000000111100000000000000000000000 }},
    { '3', { 0b00000000000000000000000011100000010001000000011000,
             0b00000001000001000100000011100000000000000000000000 }},
    { '4', { 0b00000000000000000000000100100000010010000001001000,
             0b00011111000000001000000000100000000000000000000000 }},
    { '5', { 0b00000000000000000000000111100000010000000001111000,
             0b00000011000001001100000011100000000000000000000000 }},
    { '6', { 0b00000000000000000000000011100000010001000001000000,
             0b00011111000001000100000011100000000000000000000000 }},
    { '7', { 0b00000000000000000000000111100000000010000000011000,
             0b00000100000000110000000010000000000000000000000000 }},
    { '8', { 0b00000000000000000000000011000000010010000000110000,
             0b00010010000001001000000011000000000000000000000000 }},
    { '9', { 0b00000000000000000000000011000000010010000001001000,
             0b00001110000000001000000000100000000000000000000000 }},
    { '.', { 0b00000000000000000000000000000000000000000000000000,
             0b00000000000000000000000001000000000000000000000000 }},
    { ',', { 0b00000000000000000000000000000000000000000000000000,
             0b00000000000000000000000001000000001000000000000000 }},
    { '+', { 0b00000000000000000000000000000000001000000000100000,
             0b00111110000000100000000010000000000000000000000000 }},
    { '-', { 0b00000000000000000000000000000000000000000000000000,
             0b00111110000000000000000000000000000000000000000000 }},
    { '(', { 0b00000000000000010000000010000000010000000001000000,
             0b00010000000001000000000010000000000100000000000000 }},
    { ')', { 0b00000000000000100000000001000000000010000000001000,
             0b00000010000000001000000001000000001000000000000000 }},
    { '=', { 0b00000000000000000000000000000000000000000001111000,
             0b00000000000001111000000000000000000000000000000000 }},
    { '*', { 0b00000000000000000000000000000000000000000001010000,
             0b00001000000001010000000000000000000000000000000000 }},
    { '%', { 0b00000000000000000000000100010000110010000000010000,
             0b00001000000001000100001000110000000000000000000000 }},
    { '^', { 0b00000000000000000000000001000000001010000001000100,
             0b00000000000000000000000000000000000000000000000000 }},
    { -1,  { 0b11111111111000000001100000000110000000011000000001,
             0b10000000011000000001100000000110000000011111111111 }},
    /*
    { -1,  { 0b01111111101100000011100000000110000000011000000001,
             0b10000000011000000001100000000111000000110111111110 }},
             */
    { '>', { 0b00000000000000000000000000000000010000000000100000,
             0b00000100000000100000000100000000000000000000000000 }},
    { '<', { 0b00000000000000000000000000000000000100000000100000,
             0b00010000000000100000000001000000000000000000000000 }},
    { '/', { 0b00000000000000000000000000000000000001000000001000,
             0b00000100000000100000000100000000000000000000000000 }},
    { ';', { 0b00000000000000000000000000000000000100000000010000,
             0b00000000000000000000000001000000001000000000000000 }},
    { '\'',{ 0b00000000000000000000000011000000000100000000000000,
             0b00000000000000000000000000000000000000000000000000 }},
    { '"', { 0b00000000000000000000000110110000001001000000000000,
             0b00000000000000000000000000000000000000000000000000 }},
    { ':', { 0b00000000000000000000000000000000000010000000001000,
             0b00000000000000001000000000100000000000000000000000 }},
    { '?', { 0b00000000000000000000000111100000100010000000001000,
             0b00001100000000000000000010000000000000000000000000 }},
    { '}', { 0b00000000000000100000000011000000000100000000011000,
             0b00000110000000010000000011000000001000000000000000 }},
    { '{', { 0b00000000000000010000000011000000001000000001100000,
             0b00011000000000100000000011000000000100000000000000 }},
    { ']', { 0b00000000000000000000000011000000000100000000010000,
             0b00000100000000010000000011000000000000000000000000 }},
    { '[', { 0b00000000000000000000000011000000001000000000100000,
             0b00001000000000100000000011000000000000000000000000 }},
    { '#', { 0b00000000000000000000000101000000111110000001010000,
             0b00010100000011111000000101000000000000000000000000 }},
    { '|', { 0b00000000000000100000000010000000001000000000100000,
             0b00001000000000100000000010000000001000000000000000 }},
    { '~', { 0b00000000000000000000000000000000000000000001100100,
             0b00100110000000000000000000000000000000000000000000 }},
    { '\\',{ 0b00000000000000000000001000000000010000000000100000,
             0b00000100000000001000000000010000000000000000000000 }},
    { '&', { 0b00000000000000000000000011000000010010000000100000,
             0b00010101000001001000000011100000000000000000000000 }},
    { '!', { 0b00000000000000000000000001000000000100000000010000,
             0b00000100000000000000000001000000000000000000000000 }},
    { '$', { 0b00000000000000100000000111100000101000000001110000,
             0b00001010000010101000000111000000001000000000000000 }},
    { '@', { 0b00000000000000000000000111100000100001000010110100,
             0b00101111000010000000000111100000000000000000000000 }},
    { '_', { 0b00000000000000000000000000000000000000000000000000,
             0b00000000000000000000000111100000000000000000000000 }},
    { '\t',{ 0b00000000000000000000000000000000000100000000011000,
             0b00111111000000011000000001000000000000000000000000 }},
    { '\b',{ 0b00000000000000000000000000000000001000000001100000,
             0b00111111000001100000000010000000000000000000000000 }},
    { '\n',{ 0b00000000000000000000000000000000100100000010011000,
             0b00111111000000011000000001000000000000000000000000 }},
    { -2,  { 0b11111111111111111111111111111111111111111111111111,
             0b11111111111111111111111111111111111111111111111111 }}
    /*
    { -2,  { 0b01111111101111111111111111111111111111111111111111,
             0b11111111111111111111111111111111111111110111111110 }}
             */
};

// Maximum pixel size before draw operations replace pixel maps:
static const constexpr int maxPixel = 3;


void Component::Char::paintAt(juce::Graphics& g, const char toPrint,
        const int x, const int y, const int width, const int height)
{
    const int pixelWidth = std::max(1, width / 10);
    const int pixelHeight = std::max(1, height / 10);
    if (pixelWidth <= 0 || pixelHeight <= 0)
    {
        jassertfalse;
        return;
    }
    const bool usePixels = true;
    //const bool usePixels = pixelWidth <= maxPixel && pixelHeight <= maxPixel;
    try
    {
        using juce::uint64;
        const std::pair<uint64, uint64>& charPixels = charMap.at(toPrint);
        if (usePixels)
        {
            for (int i = 0; i < 100; i++)
            {
                const uint64 bitMask = uint64(1) << (49 - (i % 50));
                const uint64& bitField = ((i >= 50) ? charPixels.second 
                        : charPixels.first);
                if ((bitMask & bitField) != 0)
                {
                    int xPos = (i % 10) * pixelWidth + x;
                    int yPos = (i / 10) * pixelHeight + y;
                    g.fillRect(xPos, yPos, pixelWidth, pixelHeight);
                }
            }
        }
        else
        {
            if (toPrint == outlineChar)
            {
                const int lineWidth = height / 20;
                g.drawRect(x + lineWidth, y + lineWidth,
                        width - 2 * lineWidth,
                        height - 2 * lineWidth,
                        lineWidth);
            }
            else if (toPrint == fillChar)
            {
                g.fillRect(x, y, width, height);
            }
            else
            {
                const int xPadding = width / 10;
                const int yPadding = height / 10;
                g.drawFittedText(juce::String::charToString(toPrint),
                        x + xPadding,
                        y + yPadding,
                        width - 2 * xPadding,
                        height - 2 * yPadding,
                        juce::Justification::centred, 1);
            }
        }
    }
    catch (std::out_of_range& e)
    {
        DBG("Missing char " << toPrint << " (" << (int) toPrint << ")");
        return;
    }
}
